version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: wildtrack-postgres
    environment:
      POSTGRES_DB: wildtrack
      POSTGRES_USER: wildtrack_user
      POSTGRES_PASSWORD: secure_password_123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql:/docker-entrypoint-initdb.d
    networks:
      - wildtrack-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wildtrack_user -d wildtrack"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: wildtrack-backend
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: wildtrack
      DB_USER: wildtrack_user
      DB_PASSWORD: secure_password_123
      JWT_SECRET: your_super_secret_jwt_key_here
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - wildtrack-network
    command: npm run dev

  # Frontend React Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: wildtrack-frontend
    environment:
      REACT_APP_API_URL: http://localhost:5000
      CHOKIDAR_USEPOLLING: true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - wildtrack-network
    command: npm start

  # Redis for Session Management (Optional for Phase 2)
  redis:
    image: redis:7-alpine
    container_name: wildtrack-redis
    ports:
      - "6379:6379"
    networks:
      - wildtrack-network

volumes:
  postgres_data:

networks:
  wildtrack-network:
    driver: bridge